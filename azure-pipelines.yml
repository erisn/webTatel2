
trigger:
- master

pool:
  name: 'Self-Hosted Windows Agent'

# define variables to use during the build
variables:
  UIworkingDirectory: 'AngDotnetDemo/AngDotnetDemo/ClientApp'

#angular build commands
strategy:
  matrix:
    node_13_x:
      node_version: 13.x
steps:

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 2.2.203
    installationPath: $(Agent.ToolsDirectory)/dotnet
    
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 3.x'
  inputs:
    packageType: runtime
    version: 3.x

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
  enabled: 'false'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--output $(Build.ArtifactStagingDirectory) --configuration Release'

- task: NodeTool@0
  inputs:
    versionSpec: $(node_version)

- task: Npm@1
  displayName: 'npm install'
  inputs:
    workingDir: $(UIworkingDirectory)
    verbose: false
  enabled: 'true'

- task: Npm@1
  displayName: 'Install Angular Cli'
  inputs:
    command: custom
    customCommand: install -g @angular/cli
    verbose: false
  enabled: 'true'

- task: Npm@1
  displayName: 'npm run build'
  inputs:
    command: custom
    customCommand: run build
    workingDir: $(UIworkingDirectory)
    verbose: false
  enabled: 'true'

- task: CopyFiles@2
  displayName: 'Copy client output to wwwroot'
  inputs:
    SourceFolder: '$(UIworkingDirectory)/dist'
    targetFolder: '$(Build.ArtifactStagingDirectory)/ClientApp/dist'
  enabled: 'true'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1    
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish:  '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
